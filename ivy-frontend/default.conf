server {
    # ---- basic configuration ----
    server_name ivypowered.com;
    listen 443 ssl http2;
    root /var/www/ivypowered/public;

    # ---- SSL config ----
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    # ---- reusable FastCGI handler ----
    location @fastcgi {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_path;
        fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;
    }

    # ---- API Routes with direct proxying ----

    # API root - handled by aggregator (has its own root route)
    location = /api/ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # ========================================
    # SSE STREAMING ENDPOINTS (Aggregator)
    # ========================================

    # SSE streaming endpoints - all handled by aggregator
    location ~ ^/api/(games/[^/]+/stream|ivy/stream|trades/stream|assets/stream|syncs/[^/]+/stream)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # SSE specific settings
        proxy_set_header Connection '';
        proxy_http_version 1.1;
        chunked_transfer_encoding off;
        proxy_buffering off;
        proxy_cache off;

        # SSE headers
        proxy_set_header Accept text/event-stream;
        proxy_set_header Cache-Control no-cache;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # ========================================
    # BACKEND ENDPOINTS (Port 4000)
    # ========================================

    # Backend transaction routes (all POST)
    location ~ ^/api/tx/(game/(create|edit|debit|withdraw-claim|deposit-complete|burn-complete)|sync/create|send|confirm/[^/]+|effects/[^/]+)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to backend
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:4000;
    }

    # Backend game-specific routes (games/*/balances, games/*/withdrawals, games/*/authenticate)
    location ~ ^/api/games/[^/]+/(balances/[^/]+|withdrawals/[^/]+|authenticate)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to backend
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:4000;
    }

    # Backend utility routes
    location ~ ^/api/(id|game-seed|sync-seed|accounts-data|token-balance|treasury-balance|ctx/[^/]+|world-alt|sol-price)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to backend
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:4000;
    }

    # ========================================
    # AGGREGATOR ENDPOINTS (Port 5000)
    # ========================================

    # Aggregator game routes (excluding stream and backend-handled routes)
    location ~ ^/api/games/[^/]+/(burns/[^/]+|deposits/[^/]+|withdrawals/[^/]+)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator game info route (games/{address})
    location ~ ^/api/games/[^/]+$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator sync routes
    location ~ ^/api/syncs/[^/]+$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator assets routes
    location ~ ^/api/assets(/|/count|/[^/]+|/[^/]+/volume_board|/[^/]+/pnl_board|/[^/]+/pnl/[^/]+)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator volume routes
    location ~ ^/api/volume(/[^/]+|/multiple)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator comments route
    location ~ ^/api/comments/[^/]+$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator ivy routes
    location ~ ^/api/ivy/(price|info)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Aggregator misc routes
    location ~ ^/api/(global-info|validate/address/[^/]+)$ {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Strip /api prefix and proxy to aggregator
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://127.0.0.1:5000;
    }

    # Fallback for unmatched API routes
    location /api {
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        add_header Content-Type application/json always;
        return 404 '{"status":"err","msg":"Endpoint not found"}';
    }

    # ---- special cases ----

    # `.php` is disallowed
    location ~ \.php$ {
        return 404;
    }

    # 404 page
    error_page 404 = @error404;
    location @error404 {
        set $fastcgi_path /404.php;
        try_files /nonexistent @fastcgi;
    }

    # /docs/images
    location /docs/images/ {
        alias /var/www/docs_build/images/;
        try_files $uri =404;
    }

    # /docs
    location /docs {
        set $fastcgi_path /docs.php;
        try_files /nonexistent @fastcgi;
    }

    # index page
    location = / {
        set $fastcgi_path /index.php;
        try_files /nonexistent @fastcgi;
    }

    # ---- everything else ----
    location / {
        try_files $uri @php_handler;
    }

    location @php_handler {
        # Remove trailing slash if present
        set $php_uri $uri;
        if ($uri ~ ^(.*)/+$) {
            set $php_uri $1;
        }

        # Check if the PHP file exists
        if (!-f $document_root$php_uri.php) {
            return 404;
        }

        # Serve PHP file
        set $fastcgi_path $php_uri.php;
        try_files /nonexistent @fastcgi;
    }
}
